#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

int compare(const void* a, const void* b) {
    long long diff = (*(long long*)a) - (*(long long*)b);
    if (diff > 0) return 1;
    if (diff < 0) return -1;
    return 0;
}

char* organizingContainers(int container_rows, int container_columns, int** container) {
    int n = container_rows;
    long long* row_sums = malloc(n * sizeof(long long));
    long long* col_sums = malloc(n * sizeof(long long));
    
    for (int i = 0; i < n; i++) {
        row_sums[i] = 0;
        col_sums[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            row_sums[i] += container[i][j];
            col_sums[j] += container[i][j]; // fixed: should be col_sums[j]
        }
    }

    qsort(row_sums, n, sizeof(long long), compare);
    qsort(col_sums, n, sizeof(long long), compare);

    char* result = malloc(15 * sizeof(char)); // enough space for "Impossible"/"Possible"

    for (int i = 0; i < n; i++) { 
        if (row_sums[i] != col_sums[i]) {
            strcpy(result, "Impossible");
            free(row_sums);
            free(col_sums);
            return result;
        }
    }

    strcpy(result, "Possible");
    free(row_sums);
    free(col_sums);
    return result;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int q = parse_int(ltrim(rtrim(readline())));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        int n = parse_int(ltrim(rtrim(readline())));

        int** container = malloc(n * sizeof(int*));

        for (int i = 0; i < n; i++) {
            *(container + i) = malloc(n * (sizeof(int)));

            char** container_item_temp = split_string(rtrim(readline()));

            for (int j = 0; j < n; j++) {
                int container_item = parse_int(*(container_item_temp + j));
                *(*(container + i) + j) = container_item;
            }
        }

        char* result = organizingContainers(n, n, container);
        fprintf(fptr, "%s\n", result);
        free(result);
        
        for (int i = 0; i < n; i++) free(container[i]);
        free(container);
    }

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = realloc(data, alloc_length);

        if (!data) {
            return NULL;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);
        data[data_length] = '\0';
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) return NULL;
    while (*str && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return NULL;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }
    return value;
}
